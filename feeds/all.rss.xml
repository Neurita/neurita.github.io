<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Neurita</title><link>https://neurita.github.io/</link><description></description><atom:link href="https://neurita.github.io/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 02 Sep 2015 00:00:00 +0200</lastBuildDate><item><title>How to create a Python plugin for MITK</title><link>https://neurita.github.io/how_to_create_a_python_plugin_for_mitk</link><description>&lt;p&gt;[&lt;span class="caps"&gt;TOC&lt;/span&gt;]&lt;/p&gt;
&lt;h2 id="plugins-examples"&gt;Plugins&amp;nbsp;examples&lt;/h2&gt;
&lt;p&gt;You can find some examples of &lt;span class="caps"&gt;MITK&lt;/span&gt; plugins in &lt;a target="_blank" href="https://github.com/ljsalvatierra/mitk-plugins"&gt;my Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="create-a-mitk-plugin"&gt;Create a &lt;span class="caps"&gt;MITK&lt;/span&gt;&amp;nbsp;plugin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First, we use the &lt;a target="_blank" href="http://docs.mitk.org/2015.05/NewPluginPage.html"&gt;&lt;code&gt;MitkPluginGenerator&lt;/code&gt;&lt;/a&gt;.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;/path/to/MITK-build/bin/MitkPluginGenerator&lt;/span&gt; -h
$ &lt;span class="kw"&gt;/path/to/MITK-build/bin/MitkPluginGenerator&lt;/span&gt; --out-dir /output/directory \
  --vendor Plugin_vendor_name --view-name &lt;span class="st"&gt;&amp;quot;My View&amp;quot;&lt;/span&gt; --plugin-symbolic-name org.mycompany.myplugin
$ &lt;span class="kw"&gt;cd&lt;/span&gt; /output/directory &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;ls&lt;/span&gt;
&lt;span class="kw"&gt;org.mycompany.myplugin&lt;/span&gt;
$ &lt;span class="kw"&gt;cd&lt;/span&gt; org.mycompany.myplugin &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;ls&lt;/span&gt;
&lt;span class="kw"&gt;CMakeLists.txt&lt;/span&gt;  documentation  files.cmake  manifest_headers.cmake  plugin.xml  resources  src&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Modify &lt;span class="caps"&gt;MITK&lt;/span&gt; to build with the new&amp;nbsp;plugin.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;cp&lt;/span&gt; -r ../org.mycompany.myplugin /path/to/MITK/Plugins &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; /path/to/MITK/Plugins
$ &lt;span class="kw"&gt;vim&lt;/span&gt; PluginList.cmake
&lt;span class="co"&gt;# Add your plugin with the flag &amp;#39;ON&amp;#39;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cmake"&gt;&lt;code class="sourceCode cmake"&gt;&lt;span class="kw"&gt;set&lt;/span&gt;(MITK_PLUGINS

  org.mycompany.myplugin:ON  

  org.blueberry.core.runtime:ON

  ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Set a new &lt;span class="caps"&gt;CTK&lt;/span&gt; Plugin in &lt;code&gt;CMakeLists.txt&lt;/code&gt;.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;cd&lt;/span&gt; /path/to/MITK
$ &lt;span class="kw"&gt;vim&lt;/span&gt; CMakeLists.txt
&lt;span class="co"&gt;# Search the string &amp;#39;set(re_ctkplugin&amp;#39;&lt;/span&gt;
/&lt;span class="kw"&gt;set&lt;/span&gt;(re_ctkplugin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Modify it to look like&amp;nbsp;this.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cmake"&gt;&lt;code class="sourceCode cmake"&gt;&lt;span class="co"&gt;# Specify which plug-ins belong to this project&lt;/span&gt;
  &lt;span class="kw"&gt;macro&lt;/span&gt;(GetMyTargetLibraries all_target_libraries varname)
    &lt;span class="kw"&gt;set&lt;/span&gt;(re_ctkplugin_mitk &lt;span class="st"&gt;&amp;quot;^org_mitk_[a-zA-Z0-9_]+$&amp;quot;&lt;/span&gt;)
    &lt;span class="kw"&gt;set&lt;/span&gt;(re_ctkplugin_bb &lt;span class="st"&gt;&amp;quot;^org_blueberry_[a-zA-Z0-9_]+$&amp;quot;&lt;/span&gt;)
    &lt;span class="kw"&gt;set&lt;/span&gt;(re_ctkplugin_mycompany &lt;span class="st"&gt;&amp;quot;^org_mycompany_[a-zA-Z0-9_]+$&amp;quot;&lt;/span&gt;)
    &lt;span class="kw"&gt;set&lt;/span&gt;(_tmp_list)
    &lt;span class="kw"&gt;list&lt;/span&gt;(&lt;span class="ot"&gt;APPEND&lt;/span&gt; _tmp_list &lt;span class="dv"&gt;${all_target_libraries}&lt;/span&gt;)
    &lt;span class="fu"&gt;ctkMacroListFilter&lt;/span&gt;(_tmp_list re_ctkplugin_mitk re_ctkplugin_bb re_ctkplugin_mycompany OUTPUT_VARIABLE &lt;span class="dv"&gt;${varname}&lt;/span&gt;)
  &lt;span class="kw"&gt;endmacro&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;`set(re_ctkplugin_`**`mycompany &amp;quot;^org_mycompany_[a-zA-Z0-9_]+$&amp;quot;`**`)`
`ctkMacroListFilter(_tmp_list re_ctkplugin_mitk re_ctkplugin_bb `**`re_ctkplugin_mycompany`**` OUTPUT_VARIABLE ${varname})`&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="modify-your-plugin"&gt;Modify your&amp;nbsp;plugin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add Python module dependency to the plugin &lt;code&gt;CMakeLists.txt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cmake"&gt;&lt;code class="sourceCode cmake"&gt;&lt;span class="fu"&gt;mitk_create_plugin&lt;/span&gt;(
  EXPORT_DIRECTIVE EXAMPLE_EXPORT
  EXPORTED_INCLUDE_SUFFIXES src
  MODULE_DEPENDS MitkQtWidgetsExt MitkPython
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="embed-python-in-the-new-plugin"&gt;Embed Python in the new&amp;nbsp;plugin:&lt;/h3&gt;
&lt;h4 id="interact-with-mitk-python-service."&gt;Interact with &lt;a target="_blank" href="http://docs.mitk.org/2015.05/classmitk_1_1PythonService.html"&gt;Mitk Python Service&lt;/a&gt;.&lt;/h4&gt;
&lt;p&gt;When we create a plugin with &lt;code&gt;MitkPluginGenerator&lt;/code&gt; the default view contains a button &lt;code&gt;Do something&lt;/code&gt;. Each time we press that button, it calls the function &lt;code&gt;DoImageProcessing()&lt;/code&gt; that prints a message in the&amp;nbsp;console/terminal.&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;&lt;span class="co"&gt;// MyView.cpp&lt;/span&gt;

...

&lt;span class="co"&gt;// Add the Python Service header&lt;/span&gt;
&lt;span class="ot"&gt;#include &amp;lt;mitkPythonService.h&amp;gt;&lt;/span&gt;

...

&lt;span class="co"&gt;// If you followed the instructions then you have the default plugin&lt;/span&gt;
&lt;span class="co"&gt;// with this function&lt;/span&gt;

&lt;span class="dt"&gt;void&lt;/span&gt; MyView::DoImageProcessing()
{
  &lt;span class="ot"&gt;QList&lt;/span&gt;&amp;lt;mitk::DataNode::Pointer&amp;gt; nodes = &lt;span class="kw"&gt;this&lt;/span&gt;-&amp;gt;GetDataManagerSelection();
  &lt;span class="kw"&gt;if&lt;/span&gt; (nodes.empty()) &lt;span class="kw"&gt;return&lt;/span&gt;;

  mitk::DataNode* node = nodes.front();

  &lt;span class="kw"&gt;if&lt;/span&gt; (!node)
  {
    &lt;span class="co"&gt;// Nothing selected. Inform the user and return&lt;/span&gt;
    &lt;span class="ot"&gt;QMessageBox::&lt;/span&gt;information( NULL, &lt;span class="st"&gt;&amp;quot;Template&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;Please load and select an image before starting image processing.&amp;quot;&lt;/span&gt;);
    &lt;span class="kw"&gt;return&lt;/span&gt;;
  }

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Add this two line example to the end of the function &lt;code&gt;DoImageProcessing()&lt;/code&gt;.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;
      &lt;span class="co"&gt;// Each time we press that button will print `Hello World!` in the console/terminal&lt;/span&gt;
      &lt;span class="co"&gt;// First we interact with mitkPythonService and execute a simple Python function.&lt;/span&gt;
      itk::SmartPointer&amp;lt;mitk::PythonService&amp;gt; _PythonService(&lt;span class="kw"&gt;new&lt;/span&gt; mitk::PythonService());
      std::string result = _PythonService-&amp;gt;Execute( &lt;span class="st"&gt;&amp;quot;print (&amp;#39;Hello World!&amp;#39;)&amp;quot;&lt;/span&gt;, mitk::IPythonService::SINGLE_LINE_COMMAND );

      message &amp;lt;&amp;lt; &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;;
      message &amp;lt;&amp;lt; result &amp;lt;&amp;lt; &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;;
      MITK_INFO &amp;lt;&amp;lt; message.str();

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-mitk-with-your-new-plugin"&gt;Build &lt;span class="caps"&gt;MITK&lt;/span&gt; with your new&amp;nbsp;plugin&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;cd&lt;/span&gt; /path/to/MITK-build &lt;span class="co"&gt;#Clean directory&lt;/span&gt;
$ &lt;span class="kw"&gt;ccmake&lt;/span&gt; ../MITK
&lt;span class="co"&gt;# Build with the option MITK_USE_PYTHON enabled.&lt;/span&gt;
&lt;span class="co"&gt;# Configure and enable the option MITK_USE_SYSTEM_PYTHON&lt;/span&gt;
&lt;span class="co"&gt;# Configure and toggle the advance view.&lt;/span&gt;
&lt;span class="co"&gt;# Modify the Python path, library path and debug path, to use Python2.7 instead of Python3.4 or Python3.4m.&lt;/span&gt;
&lt;span class="co"&gt;# Configure again and generate.&lt;/span&gt;
$ &lt;span class="kw"&gt;make&lt;/span&gt;

&lt;span class="co"&gt;# The last command will take several hours.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="test-it"&gt;Test&amp;nbsp;it!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;code&gt;MitkWorkbench&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;/path/to/MITK-build/bin/MitkWorkbench&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Open your plugin&amp;nbsp;view:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="images/MITK_plugin_001.png" alt="Mitk Plugin" /&gt;&lt;figcaption&gt;Mitk Plugin&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Open a new image to be able to press the button &lt;code&gt;Do something&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="images/MITK_plugin_002.png" alt="Mitk Plugin" /&gt;&lt;figcaption&gt;Mitk Plugin&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;You should see this when pressing the button &lt;code&gt;Do something&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="images/MITK_plugin_003.png" alt="Mitk Plugin" /&gt;&lt;figcaption&gt;Mitk Plugin&lt;/figcaption&gt;
&lt;/figure&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luis Javier Salvatierra</dc:creator><pubDate>Wed, 02 Sep 2015 00:00:00 +0200</pubDate><guid>tag:neurita.github.io,2015-08-20:how_to_create_a_python_plugin_for_mitk</guid><category>MITK</category><category>python</category></item><item><title>How to compile MITK on Docker</title><link>https://neurita.github.io/how_to_compile_mitk_on_docker</link><description>&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;GIT&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CMake (version 3.2 or higher. Current stable&amp;nbsp;3.3)&lt;/li&gt;
&lt;li&gt;Qt 5.x
&lt;ul&gt;
&lt;li&gt;Make sure that you select a Qt version which provides the right &lt;strong&gt;OpenGL-enabled&lt;/strong&gt; packages for your architecture and&amp;nbsp;compiler&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="install-dependencies."&gt;Install&amp;nbsp;dependencies.:&lt;/h3&gt;
&lt;h4 id="install-docker"&gt;Install&amp;nbsp;Docker:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get update
$ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install curl
$ &lt;span class="kw"&gt;curl&lt;/span&gt; -sSL https://get.docker.com/ &lt;span class="kw"&gt;|&lt;/span&gt; &lt;span class="kw"&gt;sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="option-1-ubuntu-14.04"&gt;&lt;strong&gt;Option 1:&lt;/strong&gt; Ubuntu&amp;nbsp;14.04&lt;/h5&gt;
&lt;p&gt;Pull a Docker container with Ubuntu:14.04 and run&amp;nbsp;it:&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;docker&lt;/span&gt; pull ubuntu:14.04
$ &lt;span class="kw"&gt;docker&lt;/span&gt; images
$ &lt;span class="kw"&gt;docker&lt;/span&gt; run -i -t &lt;span class="kw"&gt;&amp;lt;&lt;/span&gt;IMAGE_ID&lt;span class="kw"&gt;&amp;gt;&lt;/span&gt; /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once inside the Ubuntu 14.04 container, install &lt;span class="caps"&gt;MITK&lt;/span&gt;&amp;nbsp;dependencies:&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ apt-get update &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;apt-get&lt;/span&gt; install -y \
    software-properties-common \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;apt-add-repository&lt;/span&gt; multiverse \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;apt-get&lt;/span&gt; update \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;apt-get&lt;/span&gt; install -y \
    bison build-essential curl git libarchive-dev libbz2-ocaml-dev libcurl4-openssl-dev \
    libexpat-ocaml-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev \
    libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libtheora-dev libtiff5-dev \
    libvorbis-dev libvpx-dev libwrap0-dev libxi-dev libxmu-dev pkg-config qt5-default \
    qtscript5-dev qttools5-dev qttools5-dev-tools vim wget yasm libgtk2.0-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="option-2-ubuntu-15.04"&gt;&lt;strong&gt;Option 2:&lt;/strong&gt; Ubuntu&amp;nbsp;15.04&lt;/h5&gt;
&lt;p&gt;Pull a Docker container with Ubuntu 15.04 and run&amp;nbsp;it:&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;docker&lt;/span&gt; pull ubuntu:15.04
$ &lt;span class="kw"&gt;docker&lt;/span&gt; images
$ &lt;span class="kw"&gt;docker&lt;/span&gt; run -i -t &lt;span class="kw"&gt;&amp;lt;&lt;/span&gt;IMAGE_ID&lt;span class="kw"&gt;&amp;gt;&lt;/span&gt; /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once inside the&amp;nbsp;container:&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ apt-get update &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;apt-get&lt;/span&gt; install -y \
    software-properties-common \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;apt-add-repository&lt;/span&gt; multiverse \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;apt-get&lt;/span&gt; update \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;apt-get&lt;/span&gt; install -y \
    bison build-essential curl git libarchive-dev libbz2-ocaml-dev libcurl4-openssl-dev \
    libexpat1-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev \
    libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libtheora-dev libtiff5-dev \
    libvorbis-dev libvpx-dev libwrap0-dev libxi-dev libxmu-dev python-dev pkg-config \
    qt5-default qtscript5-dev qttools5-dev qttools5-dev-tools vim wget yasm libgtk2.0-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="from-now-on-you-must-run-everything-inside-the-container"&gt;From now on, you must run everything inside the&amp;nbsp;container:&lt;/h4&gt;
&lt;h4 id="install-opencl"&gt;Install&amp;nbsp;OpenCL:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="co"&gt;# OpenCL for Intel/AMD:&lt;/span&gt;
        &lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ apt-get install ocl-icd-opencl-dev

&lt;span class="co"&gt;# OpenCL for Nvidia:&lt;/span&gt;
        &lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ apt-get install nvidia-opencl-icd-XXX
               &lt;span class="co"&gt;# Where XXX is the version. Current 346&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-cmake-3.3.0"&gt;Build Cmake&amp;nbsp;3.3.0:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ wget -c http://www.cmake.org/files/v3.3/cmake-3.3.0.tar.gz
&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ tar xvzf cmake-3.3.0.tar.gz &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; cmake-3.3.0
&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ ./bootstrap --prefix=/usr --system-libs --mandir=/share/man --no-system-jsoncpp \
  --docdir=/share/doc/cmake-3.3.0 --qt-gui
&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ make &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;make&lt;/span&gt; install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-ffmpeg-a-dependecy-of-opencv"&gt;Build FFmpeg, a dependecy of&amp;nbsp;OpenCV:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ git clone https://github.com/FFmpeg/FFmpeg.git
&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ cd FFmpeg
&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ ./configure --enable-gpl --enable-libfaac --enable-libmp3lame --enable-libopencore-amrnb \
    --enable-libopencore-amrwb --enable-libtheora --enable-libvorbis --enable-libvpx \
    --enable-nonfree --enable-version3 --enable-x11grab --enable-shared --enable-pic
&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ make &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;make&lt;/span&gt; install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-mitk"&gt;Build &lt;span class="caps"&gt;MITK&lt;/span&gt;:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ git clone http://git.mitk.org/MITK.git
&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ mkdir MITK-build &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; MITK-build
&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ ccmake ../MITK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src="images/Docker_Ubuntu_15.04_ccmake_MITK_001.png" alt="MITK ccmake image" /&gt;&lt;figcaption&gt;&lt;span class="caps"&gt;MITK&lt;/span&gt; ccmake image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src="images/Docker_Ubuntu_15.04_ccmake_MITK_002.png" alt="MITK ccmake image" /&gt;&lt;figcaption&gt;&lt;span class="caps"&gt;MITK&lt;/span&gt; ccmake image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; in Ubuntu:14.04 you &lt;span class="caps"&gt;CAN&lt;/span&gt;&amp;#8217;T select the option &amp;#8216;MITK_USE_Python&amp;#8217;, because It needs Qt &amp;gt;=&amp;nbsp;5.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tips:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;For a complete installation, press &amp;#8216;t&amp;#8217; to toggle the advance view. You may select all the options you desire, like compile with all applications and&amp;nbsp;plugins.&lt;/li&gt;
&lt;li&gt;Also, if you selected &lt;code&gt;MITK_USE_SYSTEM_PYTHON&lt;/code&gt;, you may want to change &lt;code&gt;PYTHON_EXECUTABLE&lt;/code&gt;,&lt;code&gt;PYTHON_INCLUDE_DIR&lt;/code&gt; and &lt;code&gt;PYTHON_LIBRARY&lt;/code&gt; to your respective installation. For now, It&amp;#8217;s not possible to use Python 3, so you&amp;#8217;ll have to use&amp;nbsp;Python2.7.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="co"&gt;# Press &amp;#39;c&amp;#39; to configure and &amp;#39;g&amp;#39; to generate and exit.&lt;/span&gt;

&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ make
&lt;span class="co"&gt;# I do NOT recommend running `make` with the option `-j4`. You&amp;#39;ll get dependency related errors during the build.&lt;/span&gt;
&lt;span class="co"&gt;# This last command will take several hours, so go and take a walk (in another city) :)&lt;/span&gt;

&lt;span class="kw"&gt;root@XXXXX&lt;/span&gt;:$ exit
$ &lt;span class="kw"&gt;docker&lt;/span&gt; ps -l
&lt;span class="kw"&gt;CONTAINER&lt;/span&gt; ID        IMAGE                  COMMAND             CREATED             STATUS                     PORTS               NAMES
&lt;span class="kw"&gt;b378149da6c6&lt;/span&gt;        ubuntu:15.04           &lt;span class="st"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;         8 hours ago         Exited (0) &lt;span class="kw"&gt;10&lt;/span&gt; seconds ago                      focused_newton

$ &lt;span class="kw"&gt;docker&lt;/span&gt; commit &lt;span class="kw"&gt;&amp;lt;&lt;/span&gt;CONTAINER_NAME&lt;span class="kw"&gt;&amp;gt;&lt;/span&gt; ubuntu15/mitk:latest
&lt;span class="co"&gt;# See the CONTAINER_NAME on the right of `docker ps -l`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="running-mitk"&gt;Running &lt;span class="caps"&gt;MITK&lt;/span&gt;:&lt;/h4&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Create a &lt;a href="https://docs.docker.com/reference/builder/" target="_blank"&gt;Dockerfile&lt;/a&gt;.:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="kw"&gt;FROM&lt;/span&gt; &lt;span class="kw"&gt;&amp;lt;&lt;/span&gt;IMAGE&lt;span class="kw"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kw"&gt;MAINTAINER&lt;/span&gt; &lt;span class="kw"&gt;&amp;lt;&lt;/span&gt;YOUR_NAME&lt;span class="kw"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kw"&gt;ENV&lt;/span&gt; MITK_WORKBENCH /path/to/MITK-build/bin/MitkWorkbench
&lt;span class="kw"&gt;CMD&lt;/span&gt; &lt;span class="ot"&gt;$MITK_WORKBENCH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Where &lt;code&gt;&amp;lt;IMAGE&amp;gt;&lt;/code&gt; is the name of the image where we have installed &lt;span class="caps"&gt;MITK&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;e.g.: &lt;span class="caps"&gt;FROM&lt;/span&gt;&amp;nbsp;ubuntu15/mitk:latest&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;docker&lt;/span&gt; images
&lt;span class="kw"&gt;REPOSITORY&lt;/span&gt;          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&lt;span class="kw"&gt;ubuntu15/mitk&lt;/span&gt;       latest              19af721ab6a3        11 hours ago        13.2 GB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2" type="1"&gt;
&lt;li&gt;Build a new image with the&amp;nbsp;Dockerfile.:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;docker&lt;/span&gt; build --rm -t mitk:15.04 .
$ &lt;span class="kw"&gt;docker&lt;/span&gt; images
&lt;span class="kw"&gt;REPOSITORY&lt;/span&gt;          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
&lt;span class="kw"&gt;mitk&lt;/span&gt;                15.04               bdcce6cafa44        26 minutes ago      13.2 GB
$ &lt;span class="kw"&gt;docker&lt;/span&gt; ps -l
&lt;span class="kw"&gt;CONTAINER&lt;/span&gt; ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES
&lt;span class="kw"&gt;2f140ab82356&lt;/span&gt;        mitk:15.04          &lt;span class="st"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;         42 minutes ago      Exited (0) &lt;span class="kw"&gt;41&lt;/span&gt; minutes ago                       silly_galileo
$ &lt;span class="kw"&gt;xhost&lt;/span&gt; +local:&lt;span class="kw"&gt;`docker&lt;/span&gt; inspect --format=&lt;span class="st"&gt;&amp;#39;{{ .Config.Hostname }}&amp;#39;&lt;/span&gt; &lt;span class="kw"&gt;&amp;lt;&lt;/span&gt;CONTAINER_ID&lt;span class="kw"&gt;&amp;gt;`&lt;/span&gt;
$ &lt;span class="kw"&gt;docker&lt;/span&gt; run -ti --rm -e DISPLAY=&lt;span class="ot"&gt;$DISPLAY&lt;/span&gt; -v /tmp/.X11-unix:/tmp/.X11-unix mitk:15.04&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src="images/MitkWorkbench_002.png" alt="MITK load image" /&gt;&lt;figcaption&gt;&lt;span class="caps"&gt;MITK&lt;/span&gt; load image&lt;/figcaption&gt;
&lt;/figure&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luis Javier Salvatierra</dc:creator><pubDate>Wed, 02 Sep 2015 00:00:00 +0200</pubDate><guid>tag:neurita.github.io,2015-08-13:how_to_compile_mitk_on_docker</guid><category>MITK</category><category>build</category><category>docker</category></item><item><title>How to compile MITK on Ubuntu</title><link>https://neurita.github.io/how_to_compile_mitk_on_ubuntu</link><description>&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;GIT&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CMake (version 3.2 or higher. Current stable&amp;nbsp;3.3)&lt;/li&gt;
&lt;li&gt;Qt 5.x
&lt;ul&gt;
&lt;li&gt;Make sure that you select a Qt version which provides the right &lt;strong&gt;OpenGL-enabled&lt;/strong&gt; packages for your architecture and&amp;nbsp;compiler&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="install-dependencies."&gt;Install&amp;nbsp;dependencies.:&lt;/h3&gt;
&lt;h4 id="from-the-ubuntu-packages"&gt;From the Ubuntu&amp;nbsp;packages:&lt;/h4&gt;
&lt;h5 id="option-1-ubuntu-14.04"&gt;Option 1: Ubuntu&amp;nbsp;14.04:&lt;/h5&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get update &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install -y \
    software-properties-common \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-add-repository multiverse \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get update \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install -y \
    bison build-essential curl git libarchive-dev libbz2-ocaml-dev libcurl4-openssl-dev \
    libexpat-ocaml-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev \
    libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libtheora-dev libtiff5-dev \
    libvorbis-dev libvpx-dev libwrap0-dev libxi-dev libxmu-dev pkg-config qt5-default \
    qtscript5-dev qttools5-dev qttools5-dev-tools vim wget yasm libgtk2.0-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="option-2-ubuntu-15.04"&gt;Option 2: Ubuntu&amp;nbsp;15.04:&lt;/h5&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get update &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install -y \
    software-properties-common \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-add-repository multiverse \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get update \
    &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install -y \
    bison build-essential curl git libarchive-dev libbz2-ocaml-dev libcurl4-openssl-dev \
    libexpat1-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev \
    libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libtheora-dev libtiff5-dev \
    libvorbis-dev libvpx-dev libwrap0-dev libxi-dev libxmu-dev python-dev pkg-config \
    qt5-default qtscript5-dev qttools5-dev qttools5-dev-tools vim wget yasm libgtk2.0-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="install-opencl"&gt;Install&amp;nbsp;OpenCL:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="co"&gt;# OpenCL for Intel/AMD:&lt;/span&gt;
    $ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install ocl-icd-opencl-dev

&lt;span class="co"&gt;# OpenCL for Nvidia:&lt;/span&gt;
    $ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install nvidia-opencl-icd-XXX
    &lt;span class="co"&gt;# Where XXX is the version. Current 346&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-cmake-3.3.0"&gt;Build Cmake&amp;nbsp;3.3.0:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;wget&lt;/span&gt; -c http://www.cmake.org/files/v3.3/cmake-3.3.0.tar.gz
$ &lt;span class="kw"&gt;tar&lt;/span&gt; xvzf cmake-3.3.0.tar.gz &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; cmake-3.3.0
$ &lt;span class="kw"&gt;./bootstrap&lt;/span&gt; --prefix=/usr --system-libs --mandir=/share/man --no-system-jsoncpp \
  --docdir=/share/doc/cmake-3.3.0 --qt-gui
$ &lt;span class="kw"&gt;make&lt;/span&gt; &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-ffmpeg-we-need-it-for-opencv"&gt;Build FFmpeg, we need it for&amp;nbsp;OpenCV:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;git&lt;/span&gt; clone https://github.com/FFmpeg/FFmpeg.git
$ &lt;span class="kw"&gt;cd&lt;/span&gt; FFmpeg
$ &lt;span class="kw"&gt;./configure&lt;/span&gt; --enable-gpl --enable-libfaac --enable-libmp3lame --enable-libopencore-amrnb \
    --enable-libopencore-amrwb --enable-libtheora --enable-libvorbis --enable-libvpx \
    --enable-nonfree --enable-version3 --enable-x11grab --enable-shared --enable-pic
$ &lt;span class="kw"&gt;make&lt;/span&gt; &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;sudo&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-mitk"&gt;Build &lt;span class="caps"&gt;MITK&lt;/span&gt;:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;git&lt;/span&gt; clone http://git.mitk.org/MITK.git
$ &lt;span class="kw"&gt;mkdir&lt;/span&gt; MITK-build &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; MITK-build
$ &lt;span class="kw"&gt;ccmake&lt;/span&gt; ../MITK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src="images/Docker_Ubuntu_15.04_ccmake_MITK_001.png" alt="MITK ccmake image" /&gt;&lt;figcaption&gt;&lt;span class="caps"&gt;MITK&lt;/span&gt; ccmake image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src="images/Docker_Ubuntu_15.04_ccmake_MITK_002.png" alt="MITK ccmake image" /&gt;&lt;figcaption&gt;&lt;span class="caps"&gt;MITK&lt;/span&gt; ccmake image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; in Ubuntu:14.04 you &lt;span class="caps"&gt;CAN&lt;/span&gt;&amp;#8217;T select the option &amp;#8216;MITK_USE_Python&amp;#8217;, because It needs Qt &amp;gt;=&amp;nbsp;5.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tips:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;For a complete installation, press &amp;#8216;t&amp;#8217; to toggle the advance view. You may select all the options you desire, like compile with all applications and&amp;nbsp;plugins.&lt;/li&gt;
&lt;li&gt;Also, if you selected &lt;code&gt;MITK_USE_SYSTEM_PYTHON&lt;/code&gt;, you may want to change &lt;code&gt;PYTHON_EXECUTABLE&lt;/code&gt;,&lt;code&gt;PYTHON_INCLUDE_DIR&lt;/code&gt; and &lt;code&gt;PYTHON_LIBRARY&lt;/code&gt; to your respective installation. For now, It&amp;#8217;s not possible to use Python 3, so you&amp;#8217;ll have to use&amp;nbsp;Python2.7.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span class="co"&gt;# Press &amp;#39;c&amp;#39; to configure and &amp;#39;g&amp;#39; to generate and exit.&lt;/span&gt;

$ &lt;span class="kw"&gt;make&lt;/span&gt;
&lt;span class="co"&gt;# I do NOT recommend running `make` with the option `-j4`. You&amp;#39;ll get dependency related errors during the build.&lt;/span&gt;
&lt;span class="co"&gt;# This last command will take several hours, so go and take a walk (in another city) :)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you encounter any problems building &lt;span class="caps"&gt;MITK&lt;/span&gt;, try building your self some of Its&amp;nbsp;dependencies.:&lt;/p&gt;
&lt;h4 id="build-boost-if-needed"&gt;Build Boost if&amp;nbsp;needed:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Download Boost from the official webpage &lt;a href="http://www.boost.org/" target="_blank"&gt;Boost C++ Libraries&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;tar&lt;/span&gt; --bzip2 -xf /path/to/boost_1_XX_X.tar.bz2 &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; boost_1_XX_X &lt;span class="co"&gt;#Current `boost_1_58_0`&lt;/span&gt;
$ &lt;span class="kw"&gt;./bootstrap.sh&lt;/span&gt; --prefix=/usr/local --with-python=/usr/bin/python2 &lt;span class="co"&gt;#It doesn&amp;#39;t work with Python3&lt;/span&gt;
$ &lt;span class="kw"&gt;mkdir&lt;/span&gt; ../boost-build
$ &lt;span class="kw"&gt;sudo&lt;/span&gt; ./b2 -q --build-dir=../boost-build variant=release install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-opencv-if-needed"&gt;Build OpenCV if&amp;nbsp;needed:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install build-essential libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev \
  libswscale-dev python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev \
  libjasper-dev libdc1394-22-dev
$ &lt;span class="kw"&gt;git&lt;/span&gt; clone git@github.com:Itseez/opencv.git
$ &lt;span class="kw"&gt;mkdir&lt;/span&gt; opencv-build &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; opencv-build
$ &lt;span class="kw"&gt;ccmake&lt;/span&gt; ../opencv
&lt;span class="co"&gt;# Press &amp;#39;c&amp;#39; to configure and &amp;#39;g&amp;#39; to generate and exit.&lt;/span&gt;

$ &lt;span class="kw"&gt;make&lt;/span&gt; -j4

&lt;span class="co"&gt;# Where *4 is the number of CPU Threads.&lt;/span&gt;
&lt;span class="co"&gt;# The last command will take several minutes to complete.&lt;/span&gt;

$ &lt;span class="kw"&gt;sudo&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-vtk-if-needed"&gt;Build &lt;span class="caps"&gt;VTK&lt;/span&gt; if&amp;nbsp;needed:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install tk-dev
$ &lt;span class="kw"&gt;git&lt;/span&gt; clone git://vtk.org/VTK.git
$ &lt;span class="kw"&gt;mkdir&lt;/span&gt; VTK-build &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; VTK-build
$ &lt;span class="kw"&gt;ccmake&lt;/span&gt; ../VTK
&lt;span class="co"&gt;# Press &amp;#39;c&amp;#39; to configure and &amp;#39;e&amp;#39; to continue.&lt;/span&gt;
&lt;span class="co"&gt;# Select desired options.&lt;/span&gt;
&lt;span class="co"&gt;# VTK_WRAP_PYTHON ON&lt;/span&gt;
&lt;span class="co"&gt;# VTK_QT_VERSION 5&lt;/span&gt;
&lt;span class="co"&gt;# ...&lt;/span&gt;
&lt;span class="co"&gt;# Press again &amp;#39;c&amp;#39; to configure and &amp;#39;e&amp;#39; to continue.&lt;/span&gt;
&lt;span class="co"&gt;# Press &amp;#39;g&amp;#39; to generate and exit.&lt;/span&gt;

$ &lt;span class="kw"&gt;make&lt;/span&gt; -j4
$ &lt;span class="kw"&gt;sudo&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-sofa-if-needed"&gt;Build &lt;span class="caps"&gt;SOFA&lt;/span&gt; if&amp;nbsp;needed:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;git&lt;/span&gt; clone git://scm.gforge.inria.fr/sofa/sofa.git
$ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install build-essential libqt4-dev libqt4-opengl-dev libglew-dev freeglut3-dev \
  libpng-dev ccache zlib1g-dev python2.7-dev libxml2-dev libcgal-dev libblas-dev liblapack-dev \
  libsuitesparse-dev libboost-all-dev libassimp-dev liboce-foundation-dev
$ &lt;span class="kw"&gt;mkdir&lt;/span&gt; sofa-build &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; sofa-build
$ &lt;span class="ot"&gt;CC=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;gcc&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;CXX=&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;g++&amp;quot;&lt;/span&gt; &lt;span class="kw"&gt;cmake&lt;/span&gt; -DCMAKE_BUILD_TYPE=Release  ../sofa
$ &lt;span class="kw"&gt;cmake&lt;/span&gt; .
$ &lt;span class="kw"&gt;make&lt;/span&gt; -j4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="build-gdcm-if-needed"&gt;Build &lt;span class="caps"&gt;GDCM&lt;/span&gt; if&amp;nbsp;needed:&lt;/h4&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;sudo&lt;/span&gt; apt-get install swig
$ &lt;span class="kw"&gt;git&lt;/span&gt; clone --branch release git://git.code.sf.net/p/gdcm/gdcm
$ &lt;span class="kw"&gt;mdkir&lt;/span&gt; gdcm-build &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;cd&lt;/span&gt; gdcm-build
$ &lt;span class="kw"&gt;ccmake&lt;/span&gt; ../gdcm
&lt;span class="co"&gt;# Press &amp;#39;c&amp;#39; to configure and &amp;#39;g&amp;#39; to generate and exit.&lt;/span&gt;

$ &lt;span class="kw"&gt;make&lt;/span&gt;
$ &lt;span class="kw"&gt;sudo&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="run-mitk"&gt;Run &lt;span class="caps"&gt;MITK&lt;/span&gt;&lt;/h2&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;$ &lt;span class="kw"&gt;cd&lt;/span&gt; ~/Downloads &lt;span class="kw"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kw"&gt;wget&lt;/span&gt; -c http://mitk.org/download/tutorial-data/Pic3D.nrrd
$ &lt;span class="kw"&gt;/path/to/MITK-build/bin/MitkWorkbench&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;img src="images/MitkWorkbench_001.png" alt="MITK load image" /&gt;&lt;figcaption&gt;&lt;span class="caps"&gt;MITK&lt;/span&gt; load image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Open the downloaded image in &lt;code&gt;~/Downloads&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src="images/MitkWorkbench_002.png" alt="MITK load image" /&gt;&lt;figcaption&gt;&lt;span class="caps"&gt;MITK&lt;/span&gt; load image&lt;/figcaption&gt;
&lt;/figure&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luis Javier Salvatierra</dc:creator><pubDate>Wed, 02 Sep 2015 00:00:00 +0200</pubDate><guid>tag:neurita.github.io,2015-08-13:how_to_compile_mitk_on_ubuntu</guid><category>MITK</category><category>build</category><category>Ubuntu</category></item></channel></rss>